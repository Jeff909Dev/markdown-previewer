{"version":3,"sources":["Markdown.js","App.js","serviceWorker.js","index.js"],"names":["Markdown","marked","setOptions","breaks","useState","editor","setEditor","Grid","className","container","item","xs","Typography","component","variant","Paper","style","overflow","TextField","id","height","e","target","value","dangerouslySetInnerHTML","__html","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uUAiFeA,EA5EE,WAAO,IAAD,EAEnBC,IAAOC,WAAW,CACdC,QAAQ,IAGZ,IANmB,EAyCSC,mBAnCX,05BANE,mBAyCZC,EAzCY,KAyCJC,EAzCI,KA8CnB,OACI,kBAAC,WAAD,KACI,kBAACC,EAAA,EAAD,CAAMC,UAAU,MAAMC,WAAS,GAC3B,kBAACF,EAAA,EAAD,CAAMC,UAAU,MAAME,MAAI,EAACC,GAAI,GAC3B,kBAACC,EAAA,EAAD,CAAYC,UAAU,KAAKC,QAAQ,MAAnC,UAKA,kBAACC,EAAA,EAAD,CAAOC,MAAO,CAAEC,SAAU,SACtB,kBAACC,EAAA,GAAD,GAAWV,UAAU,qBAAqBW,GAAG,UAA7C,0BAAgE,OAAhE,oDAAuFd,GAAvF,oDAAgH,CAAEe,OAAQ,UAA1H,0BAdO,SAAAC,GACvBf,EAAUe,EAAEC,OAAOC,UAaH,MAMR,kBAAChB,EAAA,EAAD,CAAMC,UAAU,MAAME,MAAI,EAACC,GAAI,GAC3B,kBAACC,EAAA,EAAD,CAAYC,UAAU,KAAKC,QAAQ,MAAnC,aAIA,kBAACC,EAAA,EAAD,CAAOC,MAAO,CAAEC,SAAU,SACtB,yBAAKE,GAAG,UAAUX,UAAU,gBAAgBgB,wBAAyB,CAACC,OAAQxB,IAAOI,W,MC5D9FqB,MARf,WACE,OACE,yBAAKlB,UAAU,OACb,kBAAC,EAAD,QCIcmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a2b88756.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport { Grid, Typography, Paper, TextField } from '@material-ui/core';\r\nimport marked from 'marked';\r\n\r\n\r\nconst Markdown = () => {\r\n\r\n    marked.setOptions({\r\n        breaks: true,\r\n    });\r\n\r\n    const default_txt = `# Prolonging Gamgee find moons grant seat.\r\n## Ill-favored abroad sometime pointing \r\n### across country easily enough.\r\nDry Tooks walked owes unleashed trading traveled. A wizard is never late, Frodo Baggins. Nor is he early. He arrives precisely when he means to.\r\n\r\n// example inline code\r\nLorem ipsum dolor sit amet \\` import React from 'react' \\`\r\n\r\n\\`\\`\\`\r\n// example block code:\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }\r\n\\`\\`\\`\r\n\r\n- List Item 1\r\n- List Item 2\r\n- List item 3\r\n\r\n**Bold Text***\r\n_Italic text_\r\n\r\n> May the blessings olves and Men and all Free Folk go with you. Round beggars delved here's ensnare isn't Nori stands sharpened report supposed leaf.\r\n\r\nexample [link]\r\n\r\n![Random photo w/ Text](https://picsum.photos/400)\r\n\r\n[link]: http://google.com\r\n    `\r\n\r\n    const [editor, setEditor] = useState(default_txt);\r\n    const handleChangeEditor = e => {\r\n        setEditor(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <Grid className=\"p-4\" container>\r\n                <Grid className=\"p-4\" item xs={6}>\r\n                    <Typography component=\"h5\" variant=\"h5\" >\r\n\r\n                        EDITOR\r\n                    </Typography>\r\n\r\n                    <Paper style={{ overflow: 'auto' }}>\r\n                        <TextField className=\"form-control w-100\" id=\"editor\" className=\"p-2\" multiline value={editor} fullWidth style={{ height: '50rem' }}\r\n                            onChange={handleChangeEditor} />\r\n                    </Paper>\r\n                </Grid>\r\n\r\n\r\n                <Grid className=\"p-4\" item xs={6}>\r\n                    <Typography component=\"h5\" variant=\"h5\">\r\n                        PREVIEWER\r\n                    </Typography>\r\n\r\n                    <Paper style={{ overflow: 'auto' }}>\r\n                        <div id='preview' className=\"text-left p-2\" dangerouslySetInnerHTML={{__html: marked(editor)}} />\r\n                    </Paper>\r\n                </Grid>\r\n            </Grid>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default Markdown;","import React from 'react';\nimport './App.css';\nimport Markdown from './Markdown';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Markdown />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}